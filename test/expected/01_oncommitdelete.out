----
-- Regression test to Global Temporary Table implementation
--
-- Test for GTT with ON COMMIT DELETE ROWS clause.
--
-- Test drop of GTT when in use throwing error and effective
-- when done in a separate session.
--
----
-- Create a GTT like table to test ON COMMIT DELETE ROWS
CREATE GLOBAL TEMPORARY TABLE t_glob_temptable1 (id integer, lbl text) ON COMMIT DELETE ROWS;
WARNING:  GLOBAL is deprecated in temporary table creation
LINE 1: CREATE GLOBAL TEMPORARY TABLE t_glob_temptable1 (id integer,...
               ^
-- Look at Global Temporary Table definition
SELECT nspname, relname, preserved, code FROM pgtt_schema.pg_global_temp_tables;
   nspname   |      relname      | preserved |         code         
-------------+-------------------+-----------+----------------------
 pgtt_schema | t_glob_temptable1 | f         | id integer, lbl text
(1 row)

-- A "template" unlogged table should exists
SELECT n.nspname, c.relname FROM pg_class c JOIN pg_namespace n ON (c.relnamespace=n.oid) WHERE relname = 't_glob_temptable1';
   nspname   |      relname      
-------------+-------------------
 pgtt_schema | t_glob_temptable1
(1 row)

BEGIN;
-- With the first insert some value in the temporary table
INSERT INTO t_glob_temptable1 VALUES (1, 'One');
-- Look if we have two tables now
SELECT regexp_replace(n.nspname, '\d+', 'x', 'g'), c.relname FROM pg_class c JOIN pg_namespace n ON (c.relnamespace=n.oid) WHERE relname = 't_glob_temptable1';
 regexp_replace |      relname      
----------------+-------------------
 pgtt_schema    | t_glob_temptable1
 pg_temp_x      | t_glob_temptable1
(2 rows)

-- Second insert, the temporary table exists
INSERT INTO t_glob_temptable1 VALUES (2, 'Two');
-- Look at content of the template for Global Temporary Table, must be empty
SET pgtt.enabled TO off;
SELECT * FROM pgtt_schema.t_glob_temptable1;
 id | lbl 
----+-----
(0 rows)

SET pgtt.enabled TO on;
-- Look at content of the Global Temporary Table
SELECT * FROM t_glob_temptable1;
 id | lbl 
----+-----
  1 | One
  2 | Two
(2 rows)

COMMIT;
-- No row must perstist after the commit
SELECT * FROM t_glob_temptable1;
 id | lbl 
----+-----
(0 rows)

-- With holdabe cursor the rows must remain
BEGIN;
INSERT INTO t_glob_temptable1 VALUES (1, 'One');
INSERT INTO t_glob_temptable1 VALUES (2, 'Two');
DECLARE curs1 CURSOR WITH HOLD FOR SELECT * FROM t_glob_temptable1;
FETCH curs1;
 id | lbl 
----+-----
  1 | One
(1 row)

COMMIT;
-- No row must perstist after the commit for the cursor
FETCH curs1;
 id | lbl 
----+-----
  2 | Two
(1 row)

-- But not for a new select
SELECT * FROM t_glob_temptable1;
 id | lbl 
----+-----
(0 rows)

CLOSE curs1;
-- Drop the global temporary table: fail because it is in use
DROP TABLE t_glob_temptable1;
ERROR:  can not drop a GTT that is in use.
-- Reconnect and drop it
\c - -
SHOW search_path;
    search_path     
--------------------
 public,pgtt_schema
(1 row)

DROP TABLE t_glob_temptable1;
VACUUM pg_class;
SELECT pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

-- Look at Global Temporary Table definition
SELECT nspname, relname, preserved, code FROM pgtt_schema.pg_global_temp_tables; -- should be empty
 nspname | relname | preserved | code 
---------+---------+-----------+------
(0 rows)

-- The "template" unlogged table should not exists anymore
SELECT n.nspname, c.relname FROM pg_class c JOIN pg_namespace n ON (c.relnamespace=n.oid) WHERE relname = 't_glob_temptable1';
 nspname | relname 
---------+---------
(0 rows)

